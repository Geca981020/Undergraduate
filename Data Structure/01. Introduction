1장	자료구조 도입: 자료구조는 데이터를 효율적으로 조직, 관리, 저장하는 기법.

1.	1  Introduction
-	시스템 생명 주기(system life cycle)
1)	요구사항(requirement) : 프로그램이 개발되는 목적과 제공해야 되는 것들을 정의.
2)	분석(analysys): 상향식(bottom-up), 하향식(top-down), 요구사항을 작은 단위로 정리.
3)	설계(design): 분석을 이어서 진행, 좀 더 세부적으로
4)	코딩(coding): 실제 코드를 작성하는 단계
5)	검증(verification): 프로그램의 테스트, 오류 제거, 정확성 증명 등을 포함 

1.	2 Pointer & allocation
-	Definition
1)  Pointer: 메모리의 주소를 저장
2)  &: 주소 연산자 -> 일반 변수 앞에 붙이면 변수 값이 아닌 변수의 주소를 의미.
3)	*: 역 참조 연산자 -> 포인터 앞에 붙이면 해당 주소가 가리키는 값을 의미
4)	컴퓨터마다 포인터의 크기가 다를 수 있다.
5)	Null pointer: 어떤 객체나 함수도 가리키지 않는다, 0을 의미.

-	동적 메모리 할당: C언어에서는 heap 기법을 제공
Ex)	int i, *pi;
		float f, *pf;
		pi = (int *)malloc(sizeof(int *));
		pf = (float *)malloc(sizeof(float *));	
    i = 1024;	
		f = 3.14;
		pi = &i;
		pf = &f;
		prnitf(“%d, %f\n”, *pi, *pf); //1024, 3.14 
		free(pi);
		free(pf);
    
	2) 허상 참조(dangling reference): 포인터가 변해 해당 공간에 접근할 방법이 사라진 것.
	3) 포인터가 사용이 안되면 값을 NULL로 바꾸거나 free해 주는 것이 좋다. 
	Malloc을 할 때 자료형을 변환해주어야 한다. 
기본 값이 int형 이므로 나중에 포인터로 해석될 수 있다. 
	4) 많은 시스템에서 포인터의 크기는 int타입과 같다.

1.	3 Algorithm Definition
-	Algorithm: 특정한 일을 수행하는 명령어들의 유한 집합.
1)	입력: 최소 0개 이상의 입력을 받아야 한다. 
2)	출력: 적어도 하나의 동작을 수행해야 한다. 
3)	명확성: 각 명령어들은 명확하고 모호하지 않아야 한다.
4)	유한성: 어떤 경우에도 한정된 수의 단계 뒤에는 반드시 종료되어야 한다.
5)	유효성
VS Program: 프로그램은 유한성을 만족하지 않아도 된다.

1.	4 Data Abstraction
-	C언어에서 자료를 그룹화 하는 방법: array, struct
-	데이터 타입은 객체와 그 객체 위에서 작동하는 연산들의 집합이다.

-	ADT(abstract data type): 자료들(data)과 그 자료들에 대한 연산들(function)의 집합.
기능을 서술하지 않고, 기능이 무엇을 하는 지만 나열한 것.
Ex) java, python의 class

1.	5 Performance analysis
-	Performance analysis: 컴퓨터와 상관없이 시공간의 추산에 초점을 두는 분야.
-	Performance measurement: 컴퓨터에 의존적인 실행시간을 얻는 것.

-	Space complexity: 프로그램을 실행시켜 완료하는데 필요로 하는 공간의 양.
1)	고정 공간 요구: 프로그램의 입출력 횟수, 크기에 관계없는 공간 요구.
코드 저장공간, 단순 변수, 고정 크기의 구조 변수, 상수
2)	가변 공간 요구: 풀려는 문제의 특정 인스턴스에 의존되는 공간 요구.
순환 호출, 동적으로 필요한 공간
	S(p) = c + Sp(I) / 총 공간 요구 = 고정 공간 요구 + 가변 공간 요구.

-	Time complexity: 프로그램을 실행시켜 완료하는데 필요로 하는 시간의 양.
-	2개는 서로 상반되어 모두 잡을 수 없으며, Time complexity를 더 우선시 한다.
-	프로그램 P에 의해 소요되는 시간은 컴파일 시간(주로 무시) + 실행 시간
-	시간 복잡도는 best case, average case, worst case중 worst case를 찾고 표기.

-	점근 표기법
1)	Big – Oh: 크기 이하
2)	Omege: 크기 이상
3)	Theta: 크기 동일

1.	6 Performance measurement
-	C언어에서는 #include <time.h>로 프로그램 시간을 측정할 수 있다.
