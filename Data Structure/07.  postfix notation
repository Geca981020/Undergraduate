3. 5 수식의 계산(후위표기법 -> 연산결과, 중위표기법 -> 후위표기법)
- 모든 프로그래밍 언어는 연산자의 연산순서를 결정하는 우선순위 계층(precedence hierarchy)를 가지고 있다.
- 중위 표기법(infix notation): 두 피연산자 사이에 연산자기호가 존재.
 중위표기법은 사람한테 익숙하지만 컴파일러에게는 매우 불편하다.
 컴파일러는 일반적으로 괄호를 사용하지 않는 후위 표기법(postfix notation)을 사용.
- 후위표기법에서는 연산자가 피연산자들 이후에 온다.

<후위표기법 -> 연산결과>
- token은 피연산자와 연산자들을 모두 포함한다.
- token을 stack에 하나씩 읽어오며 stack이 채워지거나 비어질 때 top을 증감시킨다.
1) 피연산자가 token으로 주어지면 stack에 삽입하고 top을 증가시킨다.
2) 연산자가 들어오면 필요한만큼의 피연산자를 추출하고 top을 감소시킨뒤, 연산을 실행 한 뒤
다시 stack에 결과를 삽입한다.
3) 위 과정을 모든 token에 대하여 수행하고 eos(end-of-string)를 만나면 최종결과를 반환하며 프로
그램 종료.

<중위표기법 -> 후위표기법>
1) 우선순위에 맞춰 식을 모두 괄호로 묶는다.
2) 오른쪽 괄호를 지우고 연산자를 지운 위치로 옮긴다.
3) 왼쪽괄호는 전부 지운다.
Ex) 8/2-3+4*2 => (((8/2)-3)+(4*2)) => 82/3-42*+

- 이 알고리즘은 손으로 하면 잘 되지만 두 패스가 필요하여 컴퓨터로 처리하기에는 비 효율적.
 첫 번째 패스는 괄호로 묶는 것이고, 두 번째 패스는 연산자들을 이동하는 것.
- 그러므로 stack을 사용하여 왼쪽부터 한 글자씩 읽어서 피연산자는 즉시 출력하고, 연산자는 우선순위에 따라 출력시킨다.

- (이면 stack에 push, )이면 (이 나올때까지 스택에서 pop.
- 연산자가 들어오면 스택에서 이보다 높거나 같은 우선순위 것들을 pop.
그리고 새로들어온 녀석을 스택에 push.
- 모두 삽입이 이뤄지면 스택에 남아있는 모든 연산자를 pop.
- 스택 내의 우선 순위를 ISP(in-stack precedence), 그 외의 경우는 ICP(in coming precendence).
	(	)	+	-	*	/	Eos
ISP	0	19	12	12	13	13	0
ICP	20	19	12	12	13	13	0



3. 6 multiple stack, multiple queue
- 하나의 순차적 배열을 여러개의 스택을 사용할 수 있도록 동일한 크기 또는 예상 크기로 나눈다.
- top도 스택의 개수만큼 필요하다. 배열로 구현
