Chpater1 Introduction
1. 1 하드웨어
1. 1. 1 Main Memory
- RAM(휘발성)+ROM(비휘발성: 컴퓨터가 처음 켜졌을 때 필요한 명령어 저장)

1. 1. 2 Secondary Memory
- HDD, SSD, CD
- SSD: flash memory를 사용, 어떤 지점의 정보에 접근하더라도 같은 속도.
- HDD는 자기장의 원리로 물리적으로 저장하지만, SSD는 전자적으로 정보를 저장.
- HDD는 가격이 저렴하고, 장기적 보존이 가능.

1. 1. 3 CPU
- 시스템 클럭은 규칙적인 간격으로 전자적 펄스를 만들어내는데 펄스가 일어나는 빈도를 클럭 속도라고 부른다. 이것은 CPU가 명령을 얼마나 빠르게 실행하는가의 척도가 된다.
- CPU는 datapath, control, register로 구성된다.

1. 2 프로그램 실행원리
- 폰 노이만 구조: 프로그램 내장방식 컴퓨터 [fetch - decode - execute]
- 1) 보조기억장치에 있는 프로그램(명령어 + 데이터)을 메인 메모리에 적재한다.
  2)　CPU가 주 메모리로부터 명령어를 한 줄씩 읽어와 해석 및 실행한다.

1. 3 소프트웨어
1. 3. 1 system software
- debugger: 프로그램 실행과정에서 발생하는 오류를 찾을 수 있도록 도와주는 프로그램.
- utility program: 사용자가 컴퓨터를 편리하게 사용할 수 있도록 도와주는 프로그램.
  ex) V3, 알집

1. 4 프로그램 개발
1. 4. 1 IDE(Integrated Development Environment)
- 프로그램을 개발하는데 필요한 편집기, 컴파일러, 디버거 등을 통합해서 제공해주는 개발환경.
1. 4. 2 Error
- Compile Error: 컴파일이 실패한 에러
- Logical Error: 프로그래머가 요구한 대로 동작하지 않는 에러
- Run Error: 실행 중에 예상치 못한 이유로 비정상적으로 종료되는 에러
1. 4. 3 debugging
- 프로그램의 결함을 찾고 수정해 나가는 과정

Chapter2 Introduction2
2. 1 C언어 서론
2. 1. 1 탄생
- 1972년 데니스 리치와 켄 톰슨이 유닉스라는 운영체제를 만들기 위해 개발함.
- Algol, CPL -> BCPL -> B -> C
2. 1. 2 특징
- 이식성(portability), 효율성, 간결성(simplicity)이 뛰어나다.
- 이식성이란 다양한 컴퓨터 시스템에서 사용할 수 있음을, 효율성은 같은 일을 해도 자원을 덜 소모 하는 것을 말한다.
- 다양한 연산자를 제공해줘서 프로그램을 간결하고 쉽게 작성할 수 있다.
- 메모리 효율이 높다.

2. 2 간단한 C 프로그램
2. 2. 1 표준 입출력
- 표준 입력: 키보드에서 들어오는 문자열.
- 표준 출력: 모니터로 출력되는 것.
2. 2. 2 C 언어 작성 준비
1) 프로젝트 생성
- 프로젝트란 수행가능한 프로그램을 구성하는데 필요한 여러 파일들을 모아둔 것.
2) 파일 추가
- header file: source file에서 사용되는 여러 정보들을 손쉽게 사용할 수 있도록 따로 제공하는 파일.
- source file: 실제로 동작할 내용이 작성되는 파일.
3) 프로그램 작성: header file을 작성 및 추가하고 source file을 작성.
4) 컴파일과 빌드
- 프로그램 작성이 끝나면 컴파일 및 어샘블링을 수행하고, linker를 이용해 라이브러리 파일과 묶어 실행파일을 만든다. 이러한 과정을 build한다고 한다.
5) 실행과 디버깅
- 프로그램을 실행해보고 정상적으로 동작하는지 확인, 정상적으로 동작하지 않으면 버그 수정.

2. 3 Hello, World!
1) 1~2line
- header file: printf와 같은 다양한 기본 함수들의 사용법이 정의되어 있다.
- 전처리기 지시자(preprocessor directive)라고도 부르며 여기서 전처리기는 컴파일러가 프로그램을 처리하기 전에 특별한 작업을 수행해주는 프로그램을 말한다.
- 전처리기는 주석을 제거하고, #include가 가리키는 파일이 있는 위치로 찾아가 내용을 포함시키는 역할을 한다. 
- <>는 특수한 위치를 의미, 

2) 4~5 line 
- 주석(comment): 프로그램 설명문, 컴파일러는 이를 무시.
- C 언어는 //로 1줄, /*~*/로 여러줄을 주석으로 처리.

3) 7~11 line
- main은 함수의 이름이며 {}은 함수의 범위를 뜻한다.
- 여기서 함수란 특정한 임무를 수행하는 프로그램을 구성하는 작은 단위를 말한다.
- 함수는 입력으로 매개 변수(parameter)를 받고, 출력으로 result(or return)를 준다.
- C 프로그램은 프로그램 실행 시 main에서 시작한다.
- return 0은 아무 이상이 없다라는 것을 의미.

2. 4 명령줄 프로그래밍 환경
- command line Environment: 편집기, 컴파일러, 디버거 등을 모두 개별적으로 사용.
- IDE보다 더 오래되었고, IDE보다 불편하다.

Chapter3 자료형, 변수, 상수
3. 1 자료형
- 자료형(data type): 데이터의 종류

3. 2 변수
- 변수(variable): 데이터를 저장하는데 사용되는 메모리 공간의 이름 
- 식별자(identifier): 변수, 상수, 함수등의 이름
  조건: 문자( _ 밑줄 문자 포함)와 숫자, 첫 번째 문자는 숫자 x
- 대입문(assignment statement) 

3. 3 상수
- 상수(constant): 프로그램이 실행되는 동안 값이 변하지 않는 데이터, ex) const int

3. 4 정수형(integral type)
- type: char(1byte), short(2byte), int(4byte), long(4byte), long long(8byte)
- sizeof: 자료형의 크기를 나타낸다. ex) sizeof(int)
- 리터럴(literal): 프로그램에서 사용된 명시적 데이터 값. 정수 리터럴은 int라고 가정
  뒤에 l이나 L이 붙는다면 long을 의미.
- overflow: 값 넘침.
- unsigned: 0과 양의 정수만을 표현 ex) unsigned int 

3. 5 부동소수형(floating point type)
- type: float(4byte), double(8byte), long double(8byte)
- 부동소수형의 리터럴은 double 타입이다.
- float에는 f 또는 F를, long double 에는 L 또는 l를 붙인다.

3. 6 문자형(char type)
- 문자 리터럴과 문자열: character literal은 작은 따옴표로 String은 큰 따옴표로 표현.
- ASCII code: 128개의 문자를 7비트로 사용하여 표현.
- getchar/putchar: getchar() 로 문자를 입력받는다. putchar(a)로 문자를 출력한다. (1개)
- escape sequence: 백슬래시로 시작하는 문자 묶음.

Chapter4 전처리와 입출력
4. 1 전처리기 지시자
- #include: 다른 파일의 내용을 현재 파일에 포함시키도록 하는 지시자.
- 표준 헤더파일: <>로 감싸서 표현
- 일반 헤더파일: “”로 감싸서 표현, 상대경로로 경로를 알려줘야 한다.

- #define: 어떤 이름을 정의한 후, 전 처리과정에서 이 이름을 다른 내용을 바꾸고 싶을 때    사용. 이 때 정의된 이름을 macro(매크로)라고 부른다.
  ex) #define MESSAGE "Have a nice day!" main(){printf(MESSAGE);}
- macro function: #define을 만들 때 함수의 형태로 만듦.
  ex) #define DUP(MESSAGE) MESSAGE MESSAGE main(){printf(DUP("Hello?")); }
- 역슬래시를 쓰면 문자를 밑줄에도 이어서 쓸 수 있다. #x로 변수이름도 받음

4. 2 표준 입출력
- library functions: 다양한 플랫폼에서 동일한 인터페이스를 제공하기 위해 사용.
- standard library: 플랫폼에 상관없이 공통적으로 제공되는 라이브러리.
- format string

- printf("pi = %10.12f", pi); 10은 폭을, 12는 소수점 밑 부분의 개수를 의미.


- scanf("%d", &n); -> 컴퓨터는 27을 받으면 숫자 27이라고 생각하지 않고 문자열 “27“이라고 생각한다. scanf가 이를 숫자로 변경하고 n에 저장한다.
- & 은 address-of operator 이다.

- gets/puts: 한 줄의 문자열을 읽고 쓴다. 줄바꿈문자를 포함한다(2개,1개).
  gets는 저장할 때 줄바꿈문자까지 읽지만 줄바꿈문자를 빼고 널문자를 넣는다. puts는 출력할 때 널문자를 빼고 줄바꿈문자를 추가한다.

4. 3 버퍼
- buffer: 데이터를 임시로 저장해두는 곳.
  버퍼는 데이터가 생성되는 속도와 데이터를 처리하는 속도 사이의 완충역할을 한다.
  사용자가 키보드에 입력한 내용은 바로 컴퓨터 프로그램에 전달되는 것이 아닌 입력버퍼    라는 곳에 전달된다. 출력데이터를 저장하기 위한 출력버퍼도 존재한다.
- scanf가 %c 일 때에는 공백문자를 무시하지 않는다. 그래서 %c는 아래 방법처럼 공백 둠.
- 하나의 scanf로 여러 데이터 입력받기: scanf("%d%d", &a, &b);, scanf("%d %c", &a, &b);
- double형 format string 은 %lf를 사용한다.
- buffer overrun: 버퍼에 저장할 수 있는 한계를 넘어 데이터가 저장되는 상황.
  gets와 puts는 buffer overrun을 발생 시킬 수 있으므로 fgets와 fputs로 사용하자.

4. 4 입출력 방향 재지정
- input/output redirection: 텍스트 파일로 프로그램의 입력이나 출력을 대신하는 것.
- 명령 프롬프트에서 수행 prog <input.txt >output.txt (= prog >output.txt <input.txt )
  prog 프로그램의 입력을 input.txt로 출력을 output.txt로 대체하겠다.

Chapter5 기초 연산자 
5. 1 연산자
- 수식(expression): 연산자와 피연산자들의 조합
- 연산자(operator): 연산을 수행하는 기호들
- 피연산자: 연산 수행의 대상들
- 단항 연산자(unary operator), 이항 연산자(binary operator), 삼항 연산자

5. 2 산술 연산자
- +, -, *, /, %
- /를 할 때 두 피연산자가 정수이면 정수로, 한 개나 두 개가 부동소수점이면 부동소수점으로 결과를 출력한다.

5. 3 형 변환 [묵시적 형 변환, 명시적 형 변환]   
- C언어에서 서로 다른 형의 혼합 연산을 수행하면 기억장소의 크기가 작은 쪽이 큰 쪽으로 자동 변환되어 연산된다. (widening conversion: 확장 변환)
데이터 손실 방지
- assignment conversion(대입변환): 대입과정에서도 자동으로 발생
축소변환(narrowing conversion)이 일어 날 수 있다. int = float * int

- type casting 연산자를 사용해 자동적으로 발생시키는 것이 아닌 명시적으로 발생시킨다.
  ex) dollar = (float) won/rate; won을 float로 바꿔서 연산, won의 값 변경X

5. 4 관계 연산자
- ==, !=, <, <=, >, >=
- 결과는 0, 1로 출력

5. 5 논리 연산자
- C언어에서는 0을 FALSE로, 0을 제외한 나머지 값들을 TRUE로 간주한다.
- !(not), &&, ||
- C언어는 왼쪽 피연산자가 연산의 결과 값을 결정하는데 충분할 경우, 오른쪽 피연산자는 계산하지 않는다.

5. 6 비트 연산자
- a<<n, a>>n, &, |, ^, ~(1의 보수)

Chapter6 필수 연산자
6. 1 대입문
- 부수 효과(side effect): 연산자나 함수가 값을 리턴하는 것 외에 부수적으로 발생시키는 효과
- 대입문에서는 변수에 값을 저장하는 게 부수효과이다.
- 문장(statement): 어떤 행위를 나타내는 표현 ex) a = a+1; -> ; 의 유무
- 수식(expression): 값을 나타내는 표현 ex) b = (a = 2)

- 널 문장(null statement): 어떤 효과도 낼 수 없는 문장 -> 보기 좋게 할려구

6. 2 누적 대입 연산자
- a+= 1, a*= 1
 
6. 3 증감 연산자
- 증가 연산자(increment operator): 값을 1만큼 증가
- 감소 연산자(decrement operator): 값을 1만큼 감소
- 전치(prefix): 증감된 이후의 값을 결과 값으로 돌려준다.
- 후치(postfix): 증감되기 전의 값을 결과 값으로 돌려준다.

6. 4 조건 연산자
- Conditional Operator: C언어의 유일한 3항 연산자
- 조건 ? 값1 : 값2 => 조건이 참이면 값1, 조건이 거짓이면 값2를 선택.
- 값1 과 값 2의 자료형은 같아야한다.

6. 5 괄호도 연산자인가
- 연산자의 적용범위를 명시하기 위한 괄호는 연산자가 아니다.
- 괄호가 연산자인 경우는 타입캐스팅 연산자 이거나 함수호출(fnuction call) 연산자 뿐이다.

6. 6 우선순위  [오른쪽에서 왼쪽으로 결합] 1), 7), 8)
1) 단항 연산자
2) 산술 연산자
3) 시프트 연산자
4) 관계 연산자 (==, =!는 밑에)
5) 비트 연산자(&, ^, |)
6) 논리 연산자(&&, ||)
7) 삼항 연산자 8) 대입 연산자 9) 콤마 연산자

Chapter 10 Pointer
10. 1 정의
- Pointer: 메모리에 부여된 주소를 가리키는 녀석.
- int one = 1; int *to_one; to_one = &one; *to_one = one + 1;=> int *to_one=&one;
- 포인터로 선언된 변수나 상수에 *를 붙이면 그것은 주소가 가리키는 곳의 값이 된다.
  그냥 사용하면 주소.
- *(&a) = a

10. 2 포인터 인수 전달
- ex) void swap(int *p, int *q) {*p, *q 사용~} int main{~swap(&a, &b)~}

10. 3 배열과 포인터
- p[n] = *(p+n); int 이면 4n
- 포인터 배열과 배열 포인터는 다르다.

10. 4 typedef
- typedef: 이미 존재하는 자료형에 새로운 이름을 추가.

10. 5 void pointer
- void *p는 아무거나 가리킬 수 있다.
- 하지만 주소참조연산을 수행할 수 없다. 그러므로 연산 전 형 변환을 해줘야 한다.
- ex) p는 가능하나 *p 불가능, 그러므로 *(int *)p or *(double *)p

10. 6 function pointer
- 함수를 가리키기 위해 사용하는 포인터.
- 리턴 타입(*함수포인터명)(매개변수목록)
 ex) int (*fp)(int, int) 

Chapter11 문자열
11. 1 정의
- 문자열(String): 0개 이상의 문자들이 연속적으로 나열된 것.
- 배열의 마지막 원소는 문자열의 끝을 나타내기 위해 널 문자인 ‘\0’을 포함.
  화면에 보이지 않고, ASCII 코드 값으로 0이다.
  그러므로 15개의 문자를 저장할거면 배열의 크기는 16칸 이어야 한다.

11. 2 포인터와 문자열
- 배열 뿐 만 아니라 포인터를 사용해서 문자열을 가리킬 수 있다.
- 만약 scanf로 문자열을 받아야 한다면 배열을 사용하자.
  ex) char name[81]; scanf("%s", &name);

11. 3 포인터 배열과 문자열
- 배열의 각 원소가 포인터인 배열을 포인터 배열이라고 한다.
- 주로 여러 개의 문자열을 저장할 때 사용한다.
  char *ptr[3] = {"red", "blue", "black"};/char ptr[3][10]={"red", "blue", "black"}; 도 가능. 

11. 4 문자열 입출력
- 문자열 단위의 입출력을 지원하는 함수: gets(), puts(), sscanf(), sprintf()
- sprintf(temp, "%s %s is beautiful\n", str1, str2) : 표준 출력x, 문자열에 적는 함수.
- sscanf: 문자열에서 입력받는 함수

11. 5 문자열 함수[10개]


strlen(str)
문자열 str의 길이를 리턴.
strcpy(str1, str2)
문자열 str2를 str1에 복사.
strcat(str1, str2)
문자열 str2를 str1에 접합.
strcmp(str1, str2)
문자열 str1과 str2를 비교. 같으면 0
strchr(str, ch)
문자열 str에서 문자 ch가 처음 나타난 위치 리턴.<포인터>
strstr(str1, str2)
str1에서 str2가 처음 나타난 위치 리턴.<포인터>
strtok(str1,str2)
str1에서 str2를 구분문자로 하여 토큰(단어) 추출.<포인터>
atoi(str)
문자열 str을 int정수로 변환하여 리턴.
atol(str)
문자열 str을 long int로 변환하여 리턴.
atof(str)
문자열 str을 double로 변환하여 리턴.

- strncpy(str1, str2, n): n개의 길이의 문자열을 복사.
- strncat(str1, str2, n): n개의 길이의 문자열을 접합.
- strncmp(st1, str2, n): n개의 길이의 문자열까지 비교.
- strrchr(str, ch): 문자열에서 문자c가 마지막을 나타난 위치 리턴.

11. 6 main의 인수
- int argc = 명령줄 인수들의 개수.
- char *argv[] = 명령줄 인수들을 저장하기 위한 문자열 포인터 배열.
  argv[0]은 실행 프로그램 이름을, argv[1]은 첫 번째 인수를 의미.

Chapter12 구조체와 공용체
12. 1 구조체 정의
- 구조체(struct): 여러 자료형 변수들의 집합체
- member variable: 구조체를 구성하는 변수들.
- 구조체 변수를 선언하면 그 멤버변수들을 위한 기억공간이 연속적으로 할당 된다.
- 구조체 변수에 접근하기 위해 구조체변수.멤버명 인 점 연산자(dot operator)를 사용.
- 구조체 포인터를 사용할 때는 ->(구조체 포인터 연산자)로 표현한다.

12. 2 구조체 배열과 구조체 포인터 배열
- 구조체 배열: 구조체를 배열로 선언한 것. ex) struct student s[100];
- 위 구조에서 scanf를 받으면 scanf("%d %s %s", &s[n].id. s[n].name, s[n].major);
- 구조체 포인터 배열: 모든 공간을 잡고 있지 않아 효율적. ex) struct student *s[100];
  그러나 배열에 데이터를 넣을 때마다 malloc를 해줘야 한다.

12. 3 구조체를 매개변수로 전달
1) 구조체 자체를 매개변수로 전달
ex) void printStudent(struct student stud){stud.name, stud.major}
    main(){struct student stud1,stud2,*p; printStudent(stud1), prinStudent2(&stud2)}
2) 구조체 포인터를 매개변수로 전달
ex) void printStudent2(struct student *s){s->name, s->major}
    main(){struct student stud1,stud2,*p; prinStudent2(p)}
- 리턴도 2가지, 구조체 자체와, 구조체 포인터
ex) return stud;/ rsturn s; 이후 받을 때 p = 함수명;

12. 4 중첩 구조체
- 중첩 구조체(nested structure): 구조체의 멤버 변수로 구조체를 사용.
- 사용할 때는 외부구조체,내부구조체.멤버변수로 사용.

12. 5 공용체와 비트필드
- union: 구조체와 비슷하게 여러 멤버변수들로 구성되지만 한 번에 하나의 변수만 사용가능 / 메모리 공간 효율적 활용 / 구조체와 동일하게 사용
  공용체내의 다른 멤버변수에 다른 값을 넘으면 이전 값은 지워진다.
- 비트필드: 각 구조체 멤버를 비트단위로 나누어서 선언/ 메모리 공간 효율적 활용
  int와 unsigned를 지원, unsigned 만을 주로 사용. 비트 수는 1 ~ 16비트.
  ex) struct person{unsigned domestic: 1; unsigned education: 2;};

12. 6 열거형
- enumerated type: 정수 상수들의 집합을 하나의 자료형으로 나타낸 것.
  ex) enum day{SUN, MON, TUE, WED, THU, FRI, SAT}; 
      main{enum day d1; d1 = FRI;} 
- 순서대로 0 1 2 3 4 5 6 의 순서 값이 부여된다. / d1을 프린트하면 FRI가 아닌 5 출력.

Chapter13 동적할당
13. 1 정의
- 할당(allocation): 메모리의 일부를 차지 하는 것.
- 해제(deallocation): 할당되었던 메모리 공간을 반납하는 것.
- 동적으로 할당을 하는 것은 메모리를 절약하기 위해서이다.

13. 2 활용
- malloc: 메모리 할당 함수 / void* 형이므로 형변환을 해줘야 한다. <stdlib.h>
- free: 메모리 할당 해제 함수 / void* 형이지만 형변환 하지 않는다.

- scanf("%d", &a[1]);
- int *p; p = (int *)malloc(sizeof(int));
- C언어에서 포인터의 크기는 32bit에서 4byte, 64bit에서 8byte이다.
- NULL은 0, FALSE를 의미.

- 메모리를 할당할 수 없는 경우 malloc 는 NULL 포인터를 반환. -> 이걸 이용해 오류처리.
- assert(p != NULL); : 주어진 수식이 참이어야 한다. / 매크로다.
  이때 주어진 수식을 전제조건(assertion)이라고 한다. / <assert.h>
  만약 실패하면 Assertion failed라는 문구와 수식, 그리고 파일이름과 라인을 출력한다.

Chapter14 파일 입출력
14. 1 파일과 파일 포인터
- 파일: 일렬로 나열된 바이트들의 연속.
- text file: 사람이 읽은 수 있는 문자들을 저장.
- binary file: 문자 데이터가 아니라 이진 데이터가 저장.

- fopen을 하면 FILE 구조체에 대한 포인터가 리턴된다. <stdio.h> => FILE 구조체
  fopen(파일이름, 모드) / 만약 파일을 열 때 오류가 발생하면 NULL을 리턴.
- fclose(파일이름) / 닫기에 성공하면 0, 오류일 때는 EOF(-1) 리턴.
- stdin: 표준입력, stdout: 표준출력, stderr: 표준오류

모드
의미
파일이 있으면
r
읽기 전용
정상 동작
w
쓰기 전용
기존 내용 삭제
a
추가 쓰기
기존 내용 뒤에 추가
r+
읽기와 쓰기
정상 동작
w+
읽기와 쓰기
기존 내용 삭제
a+
추가를 위한 읽기와 쓰기
기존 내용 뒤에 추가

14. 2 파일 입출력 함수
1) 문자 단위 파일 입출력: fgetc(fp), fputc(c, fp)
2) 줄 단위 파일 입출력: fgets(s, n ,fp): n-1개 문자 제한, fputs(s, fp)
3) 자료형을 고려하는 파일 입출력: fscanf(fp, scanf와 동일), fprintf(fp, printf와 동일)

14. 3 이진 파일
모드
의미
파일이 있으면
rb
읽기 전용
정상 동작
wb
쓰기 전용
기존 내용 삭제
ab
추가 쓰기
기존 내용 뒤에 추가
rb+
읽기와 쓰기
정상 동작
wb+
읽기와 쓰기
기존 내용 삭제
ab+
추가를 위한 읽기와 쓰기
기존 내용 뒤에 추가

4) 블록 단위 파일 입출력
fread(buf, size, n, fp);: fp가 가리키는 파일에서 size크기만큼 n번 읽어 buf에 저장.
fwrite(buf, size, n, fp);: buf에서 size 크기만큼 n번 읽어 fp가 가리키는 파일에 저장.

14. 4 임의 접근 파일 처리
- sequential access(순차접근) <-> random access(임의 접근)
기호
값
의미
SEEK_SET
0
파일 시작
SEEK_CUR
1
현재 위치
SEEK_END
2
파일 끝
- fseek(fp, offset, mode);
