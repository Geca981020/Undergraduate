3. 1 OS Internals

- I/O Management 코드가 제일 길다. 하드웨어마다 코드를 가져야 하기 때문.
- Process Management 코드가 제일 짧다. 하지만 매우 중요. 

3. 2 Computer System
- I/O장치와 CPU는 동시에 일을 할 수 있다.
- 각 device controller은 각 device를 담당한다.
- device controller에는 local buffer이 존재한다.
- I/O란 device(memory)와 local buffer 사이의 데이터 교환을 의미한다.
- I/O는 CPU가 명령을 내려야 할 수 있으며, CPU는 I/O가 끝났는지의 여부를 알아야 한다.

- 운영체제의 기능은 architecture에 의해 제한 될 수 있으므로, architecture를 고려하여 만들어 진다.
- architecture의 DMA, Interrupt등 과 같은 지원을 통해 OS 구조를 단순화 할 수 있다.

3. 3 Interrputs
- 하드웨어 디바이스가 생성 ex) x86의 INTR
- Interrupts와 exceptions이 발생하면 실행권한을 운영체제에게 넘겨준다.

I/O가 완료된걸 kernel이 어떻게 알 수 있을까?
1) Polling: CPU가 계속 완료되었는지를 체크
2) Hardware Interrupt: 일이 끝나면 interrupt를 발생시키고, 데이터를 CPU에 보낸다.
- 일반적인 경우에 Hardware Interrupt가 더 빠르다.

Interrput handling
- CPU의 상태를 보존해야 한다
1) 인터럽트 발생, 이 때 이 인터럽트를 어떻게 처리해야하는지는 모른다.
2) interrupt handler에 처리 방법이 있고 이 곳으로 가서 발생이유와 처리방법을 확인한다.
3) interrupt를 처리하고 복귀한다.

3. 4 Exceptions
- 소프트웨어 executing instructions이 생성 ex) x86의 INT instruction
- Interrupts와 exceptions의 처리는 거의 동일하다.

1) Traps
- User Application이 Intentional하게 발생시킴.
- System calls, breakpoint traps, special instructions
- Return next instruction
2) Faults
- Unintentional but possibly(impossibly) recoverable
- page faults (recoverable), protection faults(unrecoverable)
3) Aborts
- Unintentional and Unrecoverable
- Parity error, machine error

Systems call [대략 350개]
- OS에서 응용소프트웨어에 제공하는 서비스에 대한 프로그래밍 인터페이스
- Process Management: fork, exec, exit, kill
- File Management: open, close, read, write
- File System Management: mkdir, rmdir, chdir

3. 5 DMA & Timers
데이터를 주고 받는 방식
1) Programmed I/O(PIO)
- CPU가 I/O Device와 Memory사이의 데이터 교환에 직접 관여
- 조그만한 데이터를 보낼 때 유리
2) DMA(direct Memory Access)
- 최근 I/O Device의 속도랑 성능이 향상되면서 CPU의 개입없이 Memory와 직접 데이터를 교환하는 방식
- 일반적으로 PIO보다 더 효율적이다.

Timer
- 컴퓨터 0~1번 Device
- 적절한 주기마다 Interrupt를 생성하여 제어를 OS에게 다시 넘겨주는 역할
- 최대 clock수 만큼 줄 수 있으며, 최근에는 dynamic하며, 오직 OS에서만 접근 가능.

3. 6 Protected Instructions
- user mode에서 사용불가능, kernel mode에서만 사용가능한 명령어들.
- I/O access, Memory Management, mode bit(CPU 안에 있다.)

3. 7 OS & Memory Protection
- Architecture는 최소한 2개의 모드를 제공하여야 한다.
- 모드는 mode bit에 의해서 결정되며, 오직 운영체제만이 변경할 수 있다.
- IA-32 에서는 ring 0 > 1 > 2 > 3의 4가지 모드를 지원.
  IA-32 에서는 CS register이라는 mode bit register를 제공
- CPU는 protected인지 모른다. 오직 운영체제만이 안다.
- System calls을 호출해 mode bit를 바꾼다. (kernel mode == mode bit = 0)

- 운영체제는 사용자 프로그램간의 메모리를 보호하고, 자기자신 스스로도 보호해야 한다.
- base, limit register를 준비한다. / 프로그램 시작전에 OS에 의해 load됨.
- MMU(Memory Management Unit): 메모리 보호 메커니즘을 제공
1) CPU 안에 존재.
2) Base, limit register를 가지고 있다.
3) TLB, Virtual Memory, Segmentation를 제공.

Synchronization: 작업들 사이의 수행시간을 맞추는 것.
- 인터럽트를 처리 중인데 새로운 인터럽트가 들어왔다.
- OS는 위와 같은 상황일 때 여러 작업들을 동기화 할 수 있어야 한다.
- 인터럽트를 끄거나 킴, special atomic instructions(ex) Lock, LL&SC) 사용.
