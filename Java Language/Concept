chapter1 자바 서론
1. 1 컴파일, 인터프리트, 하이브리드
- compile: 실행 시간의 효율성, 시스템 제한이 많다는 점.
- interprete: 실행파일을 만들지 않음, 이식성이 뛰어남, 매우 느림, 소스프로그램 공개됨
- hybrid: 컴파일 이후 중간코드를 만들고 이걸 각 시스템에 맞는 인터프리터로 해석

1. 2 서론
- 1991년 제임스 고슬링이 개발한 오크에서 발전됨
- Java ME: 모바일, Java SE: 클라이언트 중심, Java EE: 서버 중심	
- Java는 객체지향, 하이브리드, 운영체제에 독립적인 언어이다.

chapter2 자바 도입
2. 1 JDK, JRE, JVE
- JDK(Java Development Kit): 자바 프로그램을 개발하는데 필요한 도구들을 포함. 
JDK =JRE+@, 읽기 쓰기 가능
- JRE(Java Runtime Environment): JVM이 동작할 때 필요한 라이브러리 파일들을 가지고 있다. 하지만 자바 프로그래밍 도구는 포함되어 있지 않다. 그래서 읽기 전용.
- JVE(Java Virtual Machine): 컴파일된 중간코드를 읽고 실행한다.

2. 2 Error 와 input/output
-Syntax Error, Runtime Error, Logic Error
- // 한줄 주석, /*~*/ 여러 줄 주석.
- input/output
1. System.out.println: 출력 후 줄바꿈
2. System.out.print: 출력만
3. import java.util.*: util 라이브러리를 소스코드에 포함.
4. next(): 문자열 입력, nextInt(): 정수 입력, nextDouble(): 실수 입력.

Chapter3 변수, 자료형, 연산자
3. 1 변수
- 식별자(identifier), 예약어(reserved word): 자바 언어에서 미리 사용되고 있는 단어(50개).
- 변수(variable): 영문자, 숫자, _,$ 가능 / 첫글자 숫자x / 대소문자 구별/ 공백x

3. 2 자료형
- 자바의 자료형은 기본 자료형(값) 8가지, 참조 자료형(주소) 4가지로 구분
- byte(1Byte), short(2), int(4)[정수 기본값], long(8)[끝 L], char(2)[16비트 유니코드]
- float(4Byte)[끝 F], Double(8)[실수 기본값]
- boolean(1)[1비트로도 충분하지만 메모리 최소크기가 1byte이므로 1byte를 사용]
- 자바는 오버플로우를 문법 에러로 간주한다.

3. 3 형 변환
- 연산을 수행할 때 두 개의 형이 다르면 자동으로 확대 형 변환 수행.
byte >> short/char >> int >> long >> float >> double
- 대입 할 때 축소 형 변환은 문법 에러로 간주. ex) int = double/double
- typecasting 으로 명시적 형 변환 가능 ex) (double)(first+second)/2;

3. 4 연산자
- 산술 연산자: +, -, *, /, %, ++, --
- 관계 연산자: >, >=, <, <=, ==, !=
- 논리 연산자: !, &&, ||
- 비트 연산자: &, |, ^, ~, <<, >>
- 할당 연산자: =, +=, -= ...
- 조건 연산자: 조건?참:거짓

3. 5 연산자 우선순위
- 단항 연산자 > 산술 > 시프트 > 관계 > 비트 > 논리 > 삼항 > 대입

3. 6 String
- 자바의 문자열은 String Class로 구현.
- ex) String s1 = "대한민국!";, String s2 = "Korea";. String s3 = s1+s2;

Chapter4 선택문
4. 1 if
- if-else/ if- else if- else/ nested if
- &&과 || 한쪽으로 결과를 정할 수 있으면 다른 한쪽은 평가X :short circuit evaluation

4. 2 switch
- switch(조건식: 정수형) - case 1: - default

Chapter5 반복문
5. 1 while, do-while, for
- C언어와 동일

5. 2 nested, break, continue
- C언어와 동일,  break는 반복문과 레이블블록 벗어남, continue는 반복문에서만 동작.

Chapter6 배열
6. 1 선언과 초기화
- int[] x = new int[5]; / int[][] y = new int[2][3];
- int[] z = {1,2,3,4,5,6};
- z.length : z 배열 길이 출력.
- 확장된 for문: for(int x: z){sum += x;}

6. 2 Array Class, System Class
- Arrays.fill(a, 1): a 배열의 모든 요소를 1로 채운다.
- Arrays.toString(a): a 배열을 문자열로 출력.
- Arrays.sort(a): a배열 오름차순 정렬.
- Arrays.binarySearch(a,7): a배열에서 7의 인덱스 값 출력.
- Arrays.equals(a, b): 두 배열이 같은지 평가.
- System.arraycopy(a,0,b,0,3): 배열 a의 처음부터 3개의 요소를 b에 복사.

Chapter7 객체 지향 개념
7. 1 객체 지향이란
- 프로그램에서 사용되는 건 객체로 정의되고, 객체는 속성과 기능을 가지며, 각 개체는 메시지를 통해 소통한다.
- 객체 지향은 생산성 향상과 재사용성을 높일 수 있다는 장점을 가지고 있다.
- 클래스로부터 객체를 생성하는 과정을 실체화(instantiation)라고 하며, 객체를 instance라고도 한다.

7. 2 핵심 개념
- 상속(inheritance): 상위 클래스의 모든 속성과 기능을 받고, 자신 만의 속성과 기능을 추가하는 것 / 중복 해결, 재사용 높임, 복잡한 수정 해결, 자바는 다중 상속 허용 X
- 캡슐화(encapsulation): 객체의 실제 처리 정보를 숨김 / 정보 은폐, 이식성 좋아짐.
- 메시지(Message): 객체에 일을 시키는 행위 / 객체 이름, 함수 이름, 인자 들 포함.
- 추상화(abstraction): 복잡한 문제들의 공통적인 부분을 추출하고 추상 클래스로 제공, 상속을 이용하여 하위 클래스에서 문제들 개별 구현
- 다형성(polymorphism): 서로 다른 객체가 동일한 메시지에 대해 서로 다른 방법으로 응답.
 
Chapter8 클래스: 속성
8. 1 클래스의 구조
- 클래스 구조: 멤버 변수, 생성자, 메소드
- 클래스 선언: [public/final/abstract] class classname{}
  public: 모든 클래스에서 접근 가능
  사용 x: 같은 패키지 내의 클래스에서만 접근 가능(패키지는 비슷한 기능 클래스 묶음.)
  final은 하위 클래스를 가질 수 없는 클래스임을 의미
  abstract는 객체를 생성할 수 없는 추상 클래스를 의미
- public은 main()을 가진 클래스만 가지며, 프로그램 이름은 main()을 가진 클래스와 동일해야 하며, 한 패키지내의 클래스명은 중복 x
- 객체 선언(null 값을 가진 변수)과 생성(+주소): 클래스명 객체 변수명 = new 클래스명();

8. 2 클래스의 변수
- 멤버 변수: 클래스 내부에서 메소드나 생성자 외부에서 선언된 변수들
[public/private/protected][static][final] 변수형 변수명;
public: 전체 접근 가능.
private: 소속된 클래스 내부에서만 사용가능.
protected: 같은 패키지에 속한 클래스에서 제한 없이 접근 가능. 상속 클래스면 접근가능.
없음: 같은 패키지에 속한 클래스에서 제한 없이 접근 가능.
static: 클래스 변수: 클래스로부터 생성된 모든 객체들이 공유하는 변수. 클래스이름으로접근.
final: 종단 변수: 상수로 값이 변하지 않는 변수, 선언 시 반드시 초기화.
- 생성자, 메소드 변수: [final] 변수형 변수명;
- 생성자: 클래스명과 같으며, 객체가 생성될 때 자동으로 수행되는 함수. 객체 초기화 목표.
- 메소드의 지역변수는 초기화하지 않고 사용하면 에러가 발생. 하지만 객체 선언 후 사용되는 객체변수의 변수들은 초기화가 안 돼어도 생성될 때 묵시적인 값으로 할당되어 사용 가능. 
0, 0.0, null

Chapter9 클래스: 기능
9. 1 생성자(Constructor)와 오버로딩
- [public/private] 클래스 이름(매개변수목록)
- 생성자가 없으면 객체 생성 시 매개변수가 없는 묵시적인 생성자가 자동으로 생성됨.
- 만약 명시적 생성자가 있으면 자동으로 묵시적 안함. 무조건 명시적으로 정의해야함.
- private로 선언하면 외부에서 객체를 생성할 수 없다.
- overloading: 같은 이름의 생성자를 여러 개 중첩하여 사용 가능 
  매개변수의 형과 개수로 구별, 형 혼합은 자동으로 형을 확장한다.

9. 2 예약어 this
- 생성자나 메소드에서 this는 자신을 호출한 객체를 의미.
- 생성자 내에서 this가 단독으로 사용되면 클래스 내의 다른 생성자를 호출한다.

9. 3 메소드와 오버로딩
-[public/private/protected][static/final/abstract/synchronized]리턴형 이름(매개변수들)
- static: 클래스 메소드, 객체 생성 없이 클래스 이름으로 직접 함수 호출 Arrays.sort(b)
  static 함수 안에서는 멤버 변수 중 static 변수,함수와, 내부 지역 변수만 사용 가능.
  만약 그 외의 변수도 사용하고 싶다면 자기가 포함된 클래스 객체를 생성해야한다.
- final: overriding될 수 없음을 의미.
- abstract: 추상 클래스 내에서만 사용 가능.
- synchronized: 스레드를 동기화 할 수 있는 기법을 제공
- 일반적으로 속성들은 private, 속성 리턴 함수들은 public
- main()은 자바 프로그램이 시작되는 메소드.
- 함수의 오버로딩은 함수 이름이 같고 매개변수의 형과 개수가 다를 때이다.

9. 4 메소드 값 전달 기법
1) call by value: 값을 복사해서 넘겨줌. / 안전
2) call by reference: 주소를 복사해서 넘겨줌. / 비안전/ 메모리 효율 상대적 높음.

Chapter10 상속
10. 1 도입
- 장점: 클래스 검색, 확장 ,변경 쉬움.
- 중요: 다중상속불허, 자바의 모든 클래스는 Object 클래스의 하위 클래스이다.
        Object class는 java.lang 패키지에 속해 있는 라이브러리 클래스.
- 상속: class 클래스이름 extends 상위클래스이름{}

10. 2 상속과 생성자
- 생성자는 상속이 되지 않는다.
- 하위클래스에 묵시적 생성자[매개변수 없는 생성자]가 있다면, 하위 클래스로부터 객체가 생성될 때 상위 클래스의 묵시적 생성자가 먼저 수행된다.
- 하위클래스에 명시적 생성자만 있다면, 상위 클래스의 묵시적 생성자 우선 수행.
- 하위클래스에 명시적, 묵시적 생성자 모두 있다면 상위 클래스의 묵시적 생성자 우선 수행.
- 하위클래스에서 같은 이름으로 멤버변수가 사용되면, 상위 클래스의 멤버변수 접근 불가능.

10. 3 오버라이딩
- Overloading: 같은 클래스내에서 같은 이름의 생성자나 메소드에서 사용
- Overriding: 상위클래스의 메소드를 하위 클래스에 다시 선언.
  상위클래스의 메소드와 반환 타입, 이름, 매개변수의 형과 개수가 일치해야한다.
- 메소드를 오버라이딩 할 때 상위 클래스의 한정자보다 허용범위가 넓은 경우에만 허용.
  public > protected > 한정자 사용x , private는 오버라이딩 못함.  
- 클래스 메소드를 일반 메소드로 오버라이딩 할 수 없음.
- @override 주석 사용.

10. 4 예약어 super, final
<super>
- 하위 클래스에 의해 가려진 상위 클래스의 변수나 메소드에 접근할 때 사용.
- 상위 클래스의 명시적 생성자를 사용하기 위해.

<final>
- 3가지 형태, 모두 변하는 것을 방지.
1) 메소드 지역 변수, 객체 변수에서는 상수를 의미.
2) 메소드에 붙으면 이 메소드는 오버라이딩 불가능을 의미.
3) 클래스에 붙으면 상속을 허용하지 않음. 

Chapter11 다형성, 추상클래스, 인터페이스
11. 1 객체의 형 변환
- 상위클래스 변수명 = new 하위클래스(); 가능 / is-A 관계
  상위클래스의 변수와 함수만 사용 가능.
  하위 클래스로 강제 형 변환을 하면 하위클래스의 변수와 함수도 사용 가능.
- 객체명 instanceof 클래스명: 객체가 클래스로부터 만들어졌으면 true 아니면 false.

11. 2 다형성
- Polymorphism: 추상 클래스와 인터페이스, 객체 형 변환, 오버라이딩 등을 이용하여 구현.

11. 3 추상 클래스
- abstract class 클래스이름{멤버 변수, 메소드, abstract 메소드;}

11. 4 인터페이스
- interface 인터페이스이름{상수, 메소드 선언;}
- interface를 이용해 다중 상속과 비슷하게 할 수 있고, 더욱 완벽한 추상화를 만들 수 있다.
- 인터페이스에 정의된 상수 메소드선언은 public이 기본이며 나머지 사용 불가능.
- 클래스 이름 implements 인터페이스 이름들

Chapter12 패키지, Java.lang 패키지
12. 1 패키지의 개념과 사용법
- 정의: 기능이 유사한 클래스들을 한되 모아 제공하는 것.
- 중요: 패키지가 다르면 클래스 이름이 같아도 된다. FQN(Full Qualified Name)으로 접근.
- java.lang, java.util, java.io, java.awt, java.net...
- package 패키지명; / import 패키지명.클래스명;

12. 2 포장 클래스
- 자바는 기본 자료형을 값이 아닌 객체로도 제공 ex) Boolean, Character, Integer ...
- 실행시간으로는 약간 뒤처지지만, 유용한 메소드를 사용할 수 있다.

12. 3 문자열
- 자바는 문자열을 객체로 처리
- 변하지 않는 문자열은 String Class, 변하는 문자열은 StringBuffer Class로 처리.
  효율성 때문에 구별지음 / 두 class는 java.lang 에 포함된다.
- String Buffer는 16개의 문자를 저장할 수 있는 추가공간을 확보하고 있다.
- str1+str2로 문자열 접합 시 str1에 붙이는 게 아닌 새로운 변하는 문자열 str1 객체를 생성하고 붙이는 것.

Chapter13 예외처리, 파일 입출력
13. 1 예외의 개념과 처리
- 예외: 프로그램 실행 중 발생하는 예기치 않은 사건.
- 자바에서는 예외도 모두 객체로 처리.
- JVM이 묵시적으로 예외처리를 수행하며, 예외처리구문이 있다면 예외처리구문이 예외를 처리하도록 한다.
- 모든 예외관련 클래스는 java.lang.Throwable에서 제공.
- Error, Exception이 있으며, Error는 하드웨어 관련 예외를 처리하며, Exception에서 RuntimeException과 Error는 JVM에서 처리 / 나머지는 프로그램에서 처리 권장.
- 처리 효율보다는 처리에 드는 노력이 많이들어 JVM보고 처리하라고 하는 것.
- try(예외발생가능성구문) - catch(해당예외처리구문) - finally(선택적)
- throws를 사용해 호출한 메소드에 예외를 처리하라고 넘겨주는 방법도 있다.

13. 2 문자 스트림
- 자바는 스트림으로 입출력을 하고, 스트림이란 순서가 있는 데이터의 흐름을 말한다.
- java.io에서 스트림 처리 방법을 제공.
- Character Stream: 16비트의 문자나 문자열을 읽고 쓰기 위한 스트림.
- Byte Stream: 8비트의 바이트를 읽고 쓰기 위한 스트림.
- FileWriter(Writer 상속), FileReader(Reader 상속)

13. 3 바이트 스트림
- 파일을 2진데이터로 처리할 수 있다.
- FileOutputStream(OutputStream 상속), FileInputStream(InputStream 상속)
- DataOutputStream: 자바 기본 자료형 쓰기. DataInputStream: 자바 기본 자료형 읽기.
- ObjectOutputStream: 객체를 파일에 씀 ObjectInputStream: 객체에 저장함.
  객체를 입출력할 때 직렬화(Serialization)된 데이터를 사용하고, 직렬화된 데이터를 표현함으로써, 객체의 영속성(Object Persistence)을 보장. / 여기서 영속성이란 객체가 자신의 상태를 기록해두어 다음에 다시 재생될 수 있는 능력을 말함. / 객체가 직렬화된 데이터를 사용하기 위해서는 객체를 생성하는 클래스가 Serializable 인터페이스를 포함해야 함.
