7chapter 구현
7. 1 프로그래밍 언어의 역사
- Fortran: IBM이 과학적인 계산을 하기 위해 만든 고급 언어.
- BASIC: 쉬운 문법을 사용하여, 교육용으로 만들어진 언어.
- C: 현재 가장 널리 쓰이고 있는 운영체제 및 시스템 개발 언어.
- C++: C언어에 객체지향의 개념을 더한 언어.
- C#: MS가 닷넷 프레임워크의 일부로 만든 객체지향 언어.
- Java: Sun의 제임스 고슬링이 개발한 객체지향 언어. JVM사용.
- 구현 단계: 프로그래밍 언어를 이용해, 설계서를 컴퓨터가 알 수 있도록 변환하는 과정.
  사용할 프로그래밍 언어와 코딩 스타일 등을 결정해야함.
- 프로그래밍 언어 선정 기준: 친밀감, 언어의 강점, 처리 효율성

7. 2 표준 코딩 규칙의 필요성
- 프로그래머마다 코딩 스타일이 다르기 때문에 이를 통일시켜, 유지보수 및 협업의 작업능률을 향상시키는 목적
<표준 코딩 규칙의 장점>
- 높은 가독성
- 간결하고 명확한 코딩
- 개발 시간의 단축

7. 3 주요 표준 코딩 규칙
- 명칭: 31자 이내/ 변수명과 함수명은 다르게/포인터 변수는 앞에 p
- 소스 형식: 소스 파일 하나는 200줄 이내/한 줄의 길이는 80자 이내/ 함수는 70줄 이내
            중괄호는 문장의 시작에/ 들여쓰기 
- 주석: 최초 작성자, 최초 작성일, 목적, 개정 이력
- 변수 선언 및 자료형: 용도가 같은 변수는 한 줄에/변수(배열,지역 변수)는 되도록 초기화
- 상수: 10진수, 16진수로 표현/const 사용
- 수식: 단항연산자는 피연산자에 붙이기/이항 연산자는 전후에 공백 넣기/삼항 연산자는 알아보기 쉽게 괄호로 묶기
- 문장: switch에 break를 의도적으로 안 넣은 것은 주석으로 알려주기/goto문 자제
        /for문에서는 실수 값 쓰지 않기  
