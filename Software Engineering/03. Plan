chapter3 Plan
3. 1 Plan Definition
- 소프트웨어를 개발 할 때는 비용, 기간, 자원등의 계획이 필요
- 없으면 기간과 비용이 증가

3. 2 Problem
- 문제 정의: 무엇을 개발할 것인지, 개발 범위는 어떻게 할 것인지
- 필요 사항: 개발하고자 하는 영역의 지식이 필요하다.

3. 3 Feasibility Analysis
- economic feasibility: 경제적 가치가 있는지를 확인
- technical feasibility: 개발 인력과, 기술로 개발 가능한지 확인
- legal feasibility: 법적으로 문제가 없는지 확인

3. 4 Estimating the cost
- 소프트웨어 개발비용은 예측하기 어렵다. 사람이 중심이 되어 생산성의 차이가 있어서
- 개발 비용에 영향을 주는 요소: 프로그래머 능력, 소프트웨어 복잡도-크기, 필요한 신뢰도와 기술 수준

3. 5 하향식 산정 기법
- 전문가 판단 기법: 짧은 시간에 판단하기 위해 전문가를 고용해서 비용 산정
  신뢰성이 높음, 경험에만 의존하면 부정확할 확률이 있음.
- 델파이 기법: 여러 전문가를 이용

3. 6 상향식 산정 기법
- 정의: 세부 작업 단위별로 비용 산정 후 전체 비용 합산.
- 원시 코드 라인 수 기법(LOC): 원시 코드 라인 수의 평균치, 낙관치, 비관치 측정 후 평균.
- 개발 단계별 노력 기법(effort per task)기법: SDLC의 각 단계별로 M/M(man/month)을 산정. / 구현 단계만 고려하는 LOC에 비해 좀 더 정확.

3. 7 수학적 산정 기법 : 상향식 산정 기법
1) Putnam 기법: SDLC의 전 과정에 노력의 분포를 가정.
2) COCOMO 기법: LOC 예측 후 SW 종류에 따라 각 비용 산정 공식에 대입하여 비용 측정.
- 동작: LOC 예측 -> 유형에 따른 가중치 부여 -> M/M -> 노력 조정 수치 반영 -> P/M -> 상수 적용 -> 총 개발 기간

- 프로젝트 유형
가) 단순형(organnic) 프로젝트: 50KDSI(Kilo Delivered Source Instruction) 이하
나) 중간형(semi-detached) 프로젝트:300KDSI 이하, 유틸리티 프로그램
다) 내장형(embedded) 프로젝트 300KDSI 이상
(2.4/3.0/3.6)X(KDSI)^(1.05/1.12/1.20)
- 노력 조정 수치(EAF: Effort Adjustment Factor): 4개의 특성에 총 15가지 수치가 있고 이 모두를 곱한다. 이후 최종 값에 M/M을 곱한다.
- 총 개발 기간(TDEV: Total DEVelopment time)
TDEV = 2.5 X (PM)^(0.38/0.35/0.32)

- COCOMO의 문제점: 계획단계에서 원시 코드 라인수 예측 => COCOMO2로 해결
  KDSI의 예측의 어려움, 환경에 영향을 많이 받음(ex) 개발언어)
- COCOMO2: 단계별로 값을 예측한 후 인건비 예측

3) FP(Function Point) 기법: 라인 수가 아닌 기능의 수로 비용 산정.
- 특징: 기능적 요구사항이 중심 / 사용자 관점에서의 측정
- 소프트웨어 기능 분류
데이터 기능: internal logical file: 사용자가 사용하는 대상, 이번 프로젝트에서 생성, 관리
            external interface file: 다른 프로젝트에서 만든 것, 이번 프로젝트에서 참조
트랜잭션 기능: external input: 데이터 베이스에 등록, 수정 삭제 하는 것 
              external output: 계산 로직을 거쳐서 처리된 데이터를 보여줌 
              external inQuiry: 로직이 필요 없고 그냥 그대로 보여줌

- 정규 기능 점수법: 설계 단계 이후에 사용하면 유용 / 유형별 복잡도 적용
- 간이 기능 점수법: 기획 및 발주 단계에서 사용 / 평균 복잡도 적용

- 장점: 사용자의 요구사항만으로 기능을 추출하여 측정, 모든 개발단계에서 사용 가능
- 단점: 높은 분석 능력과 전문적인 지식을 필요로 함.

<간이 기능 점수법>
- 과정: 측정 유형 결정 -> 측정 범위와 애플리케이션 경계 식별 -> 데이터 기능 점수 계산 -> 트랜잭션 기능 점수 계산 -> 보정 전 개발원가 계산 -> 보정 후 개발원가 계산
- 측정 유형: 개발 프로젝트, 개선 프로젝트, 애플리케이션(현재 운용하는 것 측정)
- UFP(Unadjusted Function Point): 데이터 기능 점수 + 트랙잭션 기능 점수
- 보정 전 개발원가:　UFP X 기능 점수당 단가
- 보정 후 개발원가: 보정 전 개발원가 X 보정 계수
- 보정 계수: 애플리케이션 유형-언어-품질/특성-규모 보정 계수

3. 8 Schedule Planning
- 일정 계획: 총 개발기간, 소작업, 소작업 당 개발 기간, 개발 순서
- 작업 분할 구조도(WBS: Work Breakdown Structure): 작업을 세분화 하는 작업
  계층 구조로 표현
  작업 패키지(work Package): 계층 구조에서 최하위에 있는 항목
- WBS 용도: 개발자와 사용자간의 의사소통 도구로 사용, 프로젝트 작업 관리 용이

- PERT/CPM: WBS를 그래프로 표현 후, 어떤 작업이 중요하고 여유가 있는 작업이 무엇인지 알아내는데 사용.
1) CPM 네트워크를 그린다.
2) ES를 구한다: Earliest Start Time 가능한 빨리 시작할 수 있는 시간.
3) EF를 구한다: Earliest Finish Time: ES에 시작했을 때 작업을 완료하는 시간.
4) LS를 구한다: Latest Start Time: 어떤 작업을 늦어도 시작해야 하는 시간.
5) LF를 구한다: Latest Finish Time: LS에 시작해 작업을 완료하는 시간.
6) ST를 구한다: Slack Time: LS-ES
7) Critical path를 구한다. 프로젝트를 마치는 있어서 가장 긴 시간을 소모하는 경로
간트 차트: 바를 이용해 일정을 표현

3. 9 Warning Analysis
- 위험관리 절차: 위험 요소 식별(개발자의 이직, 요구사항 변경 등) -> 위험 분석(위험이 발생할 가능성과 영향력 판단) -> 위험 계획 수립(대응 방안) -> 위험 감시
