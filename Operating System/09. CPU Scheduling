9chapter CPU Scheduling
9. 1 Introduction
- 정의: 실행가능한 프로세스 set이 주어지면, 다음에 실행할 프로세스를 결정하는 것.
자주 발생하므로, 빠르게 처리되어야 한다.
- 스케쥴링 알고리즘의 목표
All System: No starvation, Fairness(각 프로세스에 공평하게 CPU를 분배), balance(I/O중이면 사용하지 않게)

<Starvation>
정의: 다른 프로세스가 lock을 잡고 있어서, 다른 프로세스들이 진행되지 못하는 상황.
- 스케쥴링 정책이 좋지 않거나, 동기화 등으로 인해 starvation이 발생할 수 있다.

<scheduling type>
- Non preemptive Scheduling: 스케쥴러는 실행중인 작업이 CPU를 자발적으로 내놓을 때까지 대기.
- preemptive Scheduling: 스케쥴러는 작업을 중단시키고 강제적으로 뺏을 수 있다.

<CPU burst vs I/O burst>

- 대부분이 짧은 CPU burst / long CPU burst는 드물다.
- 대부분의 애플리케이션이 I/O burst 하다.

9. 2 CPU Scheduling
- Ready queue에서 어떤 processes를 꺼낼까?
<FCFS/ FIFO>
First Come, First Served / First In, First Out
- 작업은 도착한 순서대로 예약되고, 실행 된다.
- non preemptive, no starvation
- 단점: 작은 burst가 긴 burst 뒤에서 대기하는 경우 average waiting time이 길어진다.
        I/O와 CPU의 겹침이 발생할 수 있다.

<SJF>
Shortest Job First
- CPU burst가 가장 짧을 것으로 예상되는 프로세스를 먼저 실행시킨다.
- non preemptive, 잠재적으로 starvation
- 장점: 모든 작업이 동시에 가능할 때, SJF가 average waiting time이 최적의 최솟값을 가짐을 증명 할 수 있다.
- 단점: CPU burst를 정확하게 알 수 없다. 추측만 할 수 있을 뿐.

<SRTF>
Shortest Remaining Time First
- 새로운 프로세스가 들어오면 남은 CPU burst를 전부 재확인해서 가장 짧은 프로세스를 먼저 실행
- preemptive, starvation이 발생할 수 있다.
- 장점: 반응성이 좋아진다.
- 단점: context switch가 더 많이 발생해 총 처리 시간은 더 오래걸릴 수 있다.
 - SJF에서 P2, P4처럼 시간이 같을 경우 정책에 따라 결정한다.

<RR>
Round Robin
- Ready Q는 원형 FIFO Q로 처리.
- 각 작업에는 time slice(or time quantum)이 제공된다. (일반적으로 10~100ms)
- preemptive, no starvation
- 장점: SJF보다 average waiting time이 길지만 response time이 훨씬 더 좋다.
- quantum은 어떻게 결정하는가?
1) CPU burst의 80%가 time quantum보다 짧아야 한다.
2) Longer quantum: 처리량이 높아진다.
3) Shorter quantum: 반응성이 좋아진다.

9. 3 Priority Scheduling
- 대부분의 OS는 Priority Scheduling을 수행한다.
- 우선순위가 가장 높은 job을 먼저 수행.
- preempitve 일 수 도 있고 non-preemptive일 수 도 있다.
- 우선순위는 dynamic하게 결정된다.
- Multi level feedbakc queue(MLFQ)로 구현.
- SJF는 priority Scheduling, RR은 모든 job의 우선순위가 동일하다고 가정.
<starvation problem>
- 우선 순위가 높은 프로세스가 계속 들어오면 우선 순위가 낮은 프로세스는 실행 될 수 없다.
- solution: aging
1) function of wait time으로 오래 기다리면 우선순위를 증가시킴
2) funciton of CPU time으로 CPU를 오래 쓰면 우선순위를 감소시킴

- 스케쥴링 정책의 정답은 없다. 그냥 좋으니 쓰는 것.

<Priority inversion problem>
- 우선 순위가 낮은 작업이 필요한 리소스를 가지고 있어 우선 순위가 높은 작업을 수행할 수 없는 상황.
- solution: 우선 순위가 낮은 작업이 빨리 Critical section을 벗어나도록 돕는다.
1) Priority Inheritance Protocol(PIP)
: 우선 순위가 높은 작업이 낮은 작업에게 우선 순위를 상속(부여)시킨다.
2) Priority Ceiling Protocol(PCP)
: 우선 순위가 낮은 작업이 리소스를 가지고 있으면 우선 순위를 높여준다. 이 때, 우선순위 상한 값은 미리 정해져야 한다.
- 작업들이 끝나면 우선순위를 뺏어온다.

<MLFQ>
- multilevel queue(queue가 여러개)를 사용해서 priority를 관리한다.
- process가 CPU를 너무 많이 쓰면 낮은 priority queue로 이동시킨다. ex) aging
- I/O bound and interactive process를 높은 priority queue에 남겨 둔다.
- process가 낮은 queue에서 오래기다리면 높은 queue로 이동시킨다 starvation 방지

9. 4 Unix Scheduler
<Characteristics>
- Preemptive / Priority-based / Time-shared(based on RR) / MLFQ
- Solaris2 기준 170개의 priority levels 존재.
<General Principles>
- I/O bound processes를 CPU bound processes보다 더 높은 우선순위로
- no starvation
