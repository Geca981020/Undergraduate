1장	자료구조 도입: 자료구조는 데이터를 효율적으로 조직, 관리, 저장하는 기법.

1.	1  Introduction
-	시스템 생명 주기(system life cycle)
1)	요구사항(requirement) : 프로그램이 개발되는 목적과 제공해야 되는 것들을 정의.
2)	분석(analysys): 상향식(bottom-up), 하향식(top-down), 요구사항을 작은 단위로 정리.
3)	설계(design): 분석을 이어서 진행, 좀 더 세부적으로
4)	코딩(coding): 실제 코드를 작성하는 단계
5)	검증(verification): 프로그램의 테스트, 오류 제거, 정확성 증명 등을 포함 

1.	2 Pointer & allocation
-	Definition
1)  Pointer: 메모리의 주소를 저장
2)  &: 주소 연산자 -> 일반 변수 앞에 붙이면 변수 값이 아닌 변수의 주소를 의미.
3)	*: 역 참조 연산자 -> 포인터 앞에 붙이면 해당 주소가 가리키는 값을 의미
4)	컴퓨터마다 포인터의 크기가 다를 수 있다.
5)	Null pointer: 어떤 객체나 함수도 가리키지 않는다, 0을 의미.

-	동적 메모리 할당: C언어에서는 heap 기법을 제공
Ex)	int i, *pi;
		float f, *pf;
		pi = (int *)malloc(sizeof(int *));
		pf = (float *)malloc(sizeof(float *));	
    i = 1024;	
		f = 3.14;
		pi = &i;
		pf = &f;
		prnitf(“%d, %f\n”, *pi, *pf); //1024, 3.14 
		free(pi);
		free(pf);
    
	2) 허상 참조(dangling reference): 포인터가 변해 해당 공간에 접근할 방법이 사라진 것.
	3) 포인터가 사용이 안되면 값을 NULL로 바꾸거나 free해 주는 것이 좋다. 
	Malloc을 할 때 자료형을 변환해주어야 한다. 
기본 값이 int형 이므로 나중에 포인터로 해석될 수 있다. 
	4) 많은 시스템에서 포인터의 크기는 int타입과 같다.

1.	3 Algorithm Definition
-	Algorithm: 특정한 일을 수행하는 명령어들의 유한 집합.
1)	입력: 최소 0개 이상의 입력을 받아야 한다. 
2)	출력: 적어도 하나의 동작을 수행해야 한다. 
3)	명확성: 각 명령어들은 명확하고 모호하지 않아야 한다.
4)	유한성: 어떤 경우에도 한정된 수의 단계 뒤에는 반드시 종료되어야 한다.
5)	유효성
VS Program: 프로그램은 유한성을 만족하지 않아도 된다.
