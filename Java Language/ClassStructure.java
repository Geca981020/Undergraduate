package JavaStudy;

public class ClassStructure {

	public static void main(String[] args) {
		/*
		[클래스의 구조와 구성]
		- 클래스 구조: 멤버 변수, 생성자, 메소드
		- 클래스 선언: [public/final/abstract] class classname{}
  		public: 모든 클래스에서 접근 가능
  		사용 x: 같은 패키지 내의 클래스에서만 접근 가능(패키지는 비슷한 기능 클래스 묶음.)
  		final은 하위 클래스를 가질 수 없는 클래스임을 의미
  		abstract는 객체를 생성할 수 없는 추상 클래스를 의미
		- public은 main()을 가진 클래스만 가지며, 프로그램 이름은 main()을 가진 클래스와 동일해야 하며, 한 패키지내의 클래스명은 중복 x
		- 객체 선언(null 값을 가진 변수)과 생성(+주소): 클래스명 객체 변수명 = new 클래스명();

		- 멤버 변수: 클래스 내부에서 메소드나 생성자 외부에서 선언된 변수들
		[public/private/protected][static][final] 변수형 변수명;
		public: 전체 접근 가능.
		private: 소속된 클래스 내부에서만 사용가능.
		protected: 같은 패키지에 속한 클래스에서 제한 없이 접근 가능. 상속 클래스면 접근가능.
		없음: 같은 패키지에 속한 클래스에서 제한 없이 접근 가능.
		static: 클래스 변수: 클래스로부터 생성된 모든 객체들이 공유하는 변수. 클래스이름으로접근.
		final: 종단 변수: 상수로 값이 변하지 않는 변수, 선언 시 반드시 초기화.

		- 생성자, 메소드 변수: [final] 변수형 변수명;
		- 생성자: 클래스명과 같으며, 객체가 생성될 때 자동으로 수행되는 함수. 객체 초기화 목표.

		- 메소드의 지역변수는 초기화하지 않고 사용하면 에러가 발생. 하지만 객체 선언 후 사용되는 객체변수의 변수들은 초기화가 안되도 생성될 때 묵시적인 값으로 할당되어 사용 가능. 
		0, 0.0, null		

		[메소드(Method)]
		-[public/private/protected][static/final/abstract/synchronized]리턴형 이름(매개변수들)
		- static: 클래스 메소드, 객체 생성 없이 클래스 이름으로 직접 함수 호출 Arrays.sort(b)
  		static 함수 안에서는 멤버 변수 중 static 변수,함수와, 내부 지역 변수만 사용 가능.
  		만약 그 외의 변수도 사용하고 싶다면 자기가 포함된 클래스 객체를 생성해야한다.
		- final: overriding될 수 없음을 의미.
		- abstract: 추상 클래스 내에서만 사용 가능.
		- synchronized: 스레드를 동기화 할 수 있는 기법을 제공

		- 일반적으로 속성들은 private, 속성 리턴 함수들은 public
		- main()은 자바 프로그램이 시작되는 메소드.
		- 함수의 오버로딩은 함수 이름이 같고 매개변수의 형과 개수가 다를 때이다.

		- 생성자나 메소드에서 this는 자신을 호출한 객체를 의미.
		- 생성자 내에서 this가 단독으로 사용되면 클래스 내의 다른 생성자를 호출한다.

		- call by value: 값을 복사해서 넘겨줌. / 안전
		- call by reference: 주소를 복사해서 넘겨줌. / 비안전/ 메모리 효율 상대적 높음.
				
		[생성자(Constructor)]
		- [public/private] 클래스 이름(매개변수목록)
		- 생성자가 없으면 객체 생성 시 매개변수가 없는 묵시적인 생성자가 자동으로 생성됨.
		- 만약 명시적 생성자가 있으면 자동으로 묵시적 안함. 무조건 명시적으로 정의해야함.
		- private로 선언하면 외부에서 객체를 생성할 수 없다.

		- overloading: 같은 이름의 생성자를 여러 개 중첩하여 사용 가능 
  		매개변수의 형과 개수로 구별, 형 혼합은 자동으로 형을 확장한다.
		 */
	}
}
