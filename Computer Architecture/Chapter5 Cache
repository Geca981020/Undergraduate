chapter5 메모리 계층구조
5. 1 메모리 계층구조
- 많은 정보량을 갖는 큰 메모리에서 메모리 접근을 빠르게 하는 것은 불가능.
- 지역성의 원칙(principle of locality)
  1. temporal locality: 어떤 항목이 참조되면, 다시 그 항목이 참조될 가능성이 높다.
  2. spatial locality: 어떤 항목이 참조되면, 그 주위 다른 항목이 참조될 가능성이 높다.
  컴퓨터의 메모리를 메모리 계층구조(memory hierarchy)로 구현함으로써 지역성의 원칙을 이용할 수 있다. 메모리 계층구조는 서로 다른 속도와 크기를 갖는 메모리로 구성된다.
- 프로세서에 가장 가까운 계층은 먼 계층의 부분집합이고, 가장 낮은 계층에는 모든 데이터가 저장되어 있다.
- 블록: 메모리에서 데이터의 저장 단위.
- hit: 프로세서가 요구한 데이터가 상위 계층의 어떠한 블록에 있는 경우. <-> miss
- hit rate(적중률): hit 정도, 메모리 계층의 성능을 평가하는 요소
- miss rate = 1 - hit rate

- 메모리 계층구조를 만든 가장 큰 이유는 성능 향상이다. 그러므로 hit와 miss의 처리속도가 매우 중요.
- hit time: 메모리 계층구조의 상위계층에 접근하는 시간 + hit, miss인지 결정하는 시간
- 실패 손실(miss penalty): 하위 계층에서 해당 블록을 가져와서 상위 계층 블록과 교체하는 시간 + 그 블록을 프로세서에 보내는 시간.

5. 2 메모리 기술
- 오늘날 메모리 계층구조에서는 4가지 주요 기술이 사용된다.

1) DRAM(Dynamic Random Access Memory) - 동적
- 메인 메모리는 DRAM으로 구현된다.
- 커패시터에 데이터를 저장. 그러므로 주기적으로 refresh가 필요. 단순히 다시 읽고 쓴다.
- 1 비트 당 1개의 트랜지스터가 필요하다.
- DRAM은 두 단계 디코딩 구조를 갖는다. 전체 행을 한꺼번에 읽은 후 쓰기를 수행한다.
- DRAM은 Bank로 구성되며, PRE 신호로 뱅크를 열고 닫으며, Act 신호로 행 주소를 보낸다. 이 신호는 행을 버퍼로 보낸다.

- 프로세서와의 인터페이스를 더욱 향상시키기 위해 DRAM에 클럭을 추가한 걸 SDRAM.
  SDRAM의 장점은 클럭을 사용하므로 메모리와 프로세서를 동기화하는 시간이 필요 없다.
  일반 DRAM보다 더 빠르고, 그 이유는 추가 주소지정 대신 클럭이 연속적인 비트들을 버스트 모드로 전송할 수 있기 때문.
- DDR(Double Data Rate): 클럭의 상승에지와 하강 에지 각각에서 데이터가 전송된다.
  일반적인 SDRAM보다 약 2배 빠르다.
- address interleaving: 각 뱅크는 자신 만의 행 버퍼를 가지고 있고, 여러 뱅크에 주소를 보낼 수 있게 하여 동시에 읽고 쓰기가 가능하다. 한 번의 접근시간으로 뱅크 개수만큼의 대역폭 배수 이득을 취할 수 있다.
2) SRAM(Static Random Access Memory) - 정적
- 캐시(CPU안의 메모리)는 SRAM으로 구현된다.
- inverter 2개가 서로 입출력이 되는 플립플롭 구조.
- 읽기 접근 시간과 쓰기 접근 시간은 다를 수 있지만, 어떤 데이터든지 접근 시간은 같다.
- 1 비트 당 6~8개의 트랜지스터가 필요하다. 그러므로 DRAM보다 비트 당 면적이 크다.
- refresh가 필요 없다.

3) 플래시 메모리
- 전기적으로 지울 수 있고 프로그래밍이 가능한 ROM(EEPROM)의 한 종류
- 메모리 반도체는 RAM, ROM 두 종류이고 ROM(Read Only Memory)는 한 번 기록된 정보를 읽을 수만 있고 수정할 수 없는 메모리. 컴퓨터의 바이오스롬 등에 사용.
  0. Mask ROM: 가장 기본적인 ROM으로써, 제조 시에 데이터를 쓴다.
  1. PROM(Programmable ROM): 사용자가 한 번 기록할 수 있는 ROM으로 한 번 기록한 건 소멸되지 않고, 그 내용을 지워도 다시 기록할 수 없다.
  2. EPROM(Erasable PROM): 메모리에 저장된 데이터를 지우고, 다시 저장할 수 있는 ROM
  3. EEPROM(Electrically EPROM): 데이터를 전기적으로 지우고 다시 기록할 수 있다.
     자외선을 사용하지 않으므로, 사용하기가 매우 간편하다. 대신 느리다.
  4. UVEPROM: 자외선을 사용하여 데이터를 지울 수 있는 ROM

- 플래시 메모리는 수명이 짧은데 이를 해결하기 위해 쓰기를 분산하는 마모 균등화(wear leveling) 을 수행한다. 즉 재사상(remapping)을 한다.
 
4) 자기 디스크
- 원판의 집합으로 구성되고, 금속 원판의 양측 면의 자성체로 코팅되어 있다.
- 읽기/쓰기 헤드라고 불리는 arm이 존재.
- sector: 디스크에 정보를 쓰거나 읽는 가장 작은 단위. 512~4096 byte
- track: 동심원, 표면 당 수만 개의 트랙이 존재하고, 한 트랙은 수천 개의 섹터로 구성.
- 디스크 헤드는 서로 연결되어 같이 움직이고, 그러므로 모든 헤드는 각 면의 같은 트랙에 위치하게 된다. 한 헤드 아래에 놓인 모든 트랙을 cylinder(실린더)라고 부른다.

- 데이터에 접근하려면 운영체제가 세 단계에 걸친 명령어를 디스크에 내려야 한다.
1. 탐색 시간(seek time): 디스크 헤드를 원하는 트랙까지 이동.
2. 회전 지연 시간(rotational latency): 원하는 섹터에 위치할 때 까지 회전시킴.
3, 전송 시간(transfer time): 블록 하나를 전송하는 시간.

- 연속된 데이터 블록도 서른 다른 트랙에 저장될 수 있다. 




5. 3 캐시의 기본
- 캐시: 메인 메모리와 CPU 사이에 있는 메모리 계층. ex) 데이터 패스 메모리.

- 직접사상(direct mapped):각 메모리의 위치가 캐시내의 정확히 한 곳 에만 사상되는 구조.
가장 간단한 방법 / (블록 주소) modulo (캐시 내에 존재하는 전체 캐시 블록 수)

<캐시 검증>
- 요구하는 워드가 캐시 내에 있는지 없는지를 어떻게 알 수 있을까? 캐시에 태그를 추가
  태그는 캐시 내의 워드가 요청한 것인지 아닌지를 식별하는데 필요한 주소정보를 포함.
  태그는 캐시의 인덱스로 사용되지 않는 주소의 윗부분 비트로 구성
- 또한 캐시 블록에 유효한 정보를 가지고 있는지를 알아내는 방법이 필요하다.
  유효 비트(valid bit)를 캐시에 첨가한다.
  이 비트가 1로 설정되어 있지 않으면, 이 엔트리에는 유효한 블록이 없다고 간주한다.
- Index - V - Tag - Data
- cache miss: 데이터가 캐시에 없어서 하위 메모리 계층에 접근해야 하는 상황.

<캐시랑 메모리 어디에 쓸까>
- write through(즉시 쓰기): 데이터가 쓰일 때 캐시에 쓰고 바로 하위 계층에도 쓴다.
  항상 두 계층의 데이터가 일치함을 보장한다.
- write buffer: 메인 메모리에 쓸 때 CPU를 stall 시키지 않고 write buffer에 저장해놓고 CPU는 다른 일을 한다. 메모리에 쓰는게 완료되면 write buffer를 비운다.
- write back(나중 쓰기): 캐시에 쓰고, 나중에 그 블록이 교체될 때 하위 계층에 쓰는 방식.
   write through보다 성능이 향상된다. / write through보다 구현이 어렵다.

5. 4 캐시의 성능 향상
- 캐시 성능을 향상 시키는 방법
1. 두 개의 다른 메모리 블록이 하나의 캐시 위치를 두고 경쟁하는 확률을 줄여 실패율을 줄이는 방법
- 완전 연관(fully associative): 블록이 캐시의 어느 곳에나 위치할 수 있는 캐시 구조.
  전체 블록을 조사해야 하므로 블록을 적게 갖는 캐시에서만 유용.
- 집합 연관(set associative): 직접사상과 완전연관 사이
  블록 여러 개를 묶어서 집합으로 제공.
2. 메모리 계층 구조에 새로운 계층을 추가함으로써 실패 손실을 줄이는 것
- 다단계 캐싱(multilevel caching): 여러 단계의 캐시를 갖는 메모리 구조
  global miss rate: 다단계 캐시의 모든 단계에서 실패가 발생한 참조의 비율.
  local miss rate: 다단계 캐시의 한 캐시 단계에서 실패가 발생한 참조의 비율.
