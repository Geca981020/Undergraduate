Chapter11 Tree
[1] 트리의 개념
- 비순환의 연결 그래프
- Node: 트리를 구성하는 꼭짓점.
- Root: 트리의 가장 높은 곳에 위치하는 시작 노드.
- Parent Node, Child Node, Sibling Node(형제노드): 부모가 같은 노드들 [시블링]
- Leaf Node: 자식이 없는 노드들, 
- Internal Node(중간 노드):　루트노드도 리프노드도 아닌 노드.

- Ancestor Node(조상 노드): 루트 노드에서 임의의 한 노드에 이르는 경로에 포함된 모든 노드들,
- Descendant Node(자손 노드): 한 노드에서 리프 노드에 이르는 경로에 포함된 모든 노드들.

- Sub Tree: 트리에서 한 노드를 루트로 하는 트리.
- Degree: 노드에서 자식 노드의 개수.
- Level: 루트 노드를 0으로 시작하여, 자식 노드로 한 단계씩 내려갈 때 마다 하나씩 증가.
- Height/Depth: 최대 레벨.
- Forest: 트리에서 루트노드와 가지를 제거하여 얻는 서브 트리들

- 트리는 모서리 하나를 제거하면 연결그래프가 아니며, 서로 다른 두 node에서 임의의 노드로 접근하는 경로는 유일하다.

[2] 이진 트리
- 이진트리(Binary Tree): 차수가 최대 2인 트리.
- 완전이진트리(Complete Binary Tree): 높이가 h일 때, 1~h-1까지 모든 노드의 차수가 2이고, 레벨 h는 왼쪽부터 채워져 있는 트리.
- 포화이진트리(Full Binary Tree): 높이가 h 일 때, 1~h까지 모든 노드의 차수가 2인 트리.
- 편향이진트리(skewed Binary Tree): 왼쪽이나 오른쪽 서브 트리만 가지는 트리. [스큐드]

- 레벨 k에서 가질 수 있는 노드 수: 2^k
- 높이가 k인 이진 트리가 가질 수 있는 최대 노드 수: 2^(k+1) - 1
- 높이가 k인 이진 트리가 가질 수 있는 최소 노드 수: k+1 

- 이진트리는 배열, 연결리스트로 구현

- 순회: 모드 노드의 데이터를 처리하기 위해 모든 노드를 한번 씩 방문하는 것.
- 전위순회(Preorder Traversal): 부모노드-왼쪽자식노드-오른쪽자식노드 순으로 탐색.
- 중위순회(Inorder Traversal): 왼쪽자식노드-부모노드-오른쪽자식노드 순으로 탐색.
- 후위순회(Postorder Traversal): 왼쪽자식노드-오른쪽자식노드-부모노드 순으로 탐색.

- Binary Search Tree: 노드의 위치를 탐색할 수 있는 트리.
  트리에서 탐색되는 모든 원소는 서로 다른 유일키를 갖는다.
  왼쪽 서브 트리에 있는 원소들의 키는 그 루트의 키보다 작거나 앞선 순서를 갖는다.
  오른쪽 서브 트리에 있는 원소들의 키는 그 루트의 키보드 크거나 뒤의 순서를 갖는다.
 
[3] 트리의 활용
- 신장 트리(Spanning Tree): 그래프 G의 모든 꼭짓점을 노드로 포함하는 트리.
  루트노드는 어느 것이나 될 수 있고, 그래프에서 연결되어 있어야 트리에서 부모자식 관계를 가질 수 있다.
- 최소 신장 트리(Minimal Spanning Tree): 그래프에서 노드 간의 비용을 최소로 한 신장 트리 -> 프림 알고리즘, 크루스칼 알고리즘 사용.

- Prim Algorithm: Graph의 node의 개수는 n개
(1) 가중치가 가장 작은 edge를 선택.
(2) 선택된 edge에 연결된 node에 포함된 모든 edge를 고려하여 가중치가 가장 작은 edge를 선택
(3) edge의 weight가 같은 게 있다면 임의로 한 개를 선택.
(4) 순환이 되지 않도록, edge가 n-1개 연결되면 프로그램 종료.

- Kruskal Algorithm: Graph의 node의 개수는 n개
(1) 가중치가 가장 작은 edge를 차례로 선택.
(2) 가중치가 같은 모서리는 모두 선택.
(3) 순환이 형성되지 않도록, edge가 n-1개 연결되면 프로그램 종료,

- 허프만 코드(Huffman Algorithm): 발생 빈도가 높은 문자는 적은 비트를 할당하고, 발생 빈도가 낮은 문자는 많은 비트를 할당하는 알고리즘.
