2chapter 소프트웨어 개발 프로세스
2. 1 소프트웨어 개발 프로세스의 이해
- 프로세스: 일을 처리하는 과정 또는 순서
- 소프트웨어 개발 프로세스: 작업 순서의 집합 + 제약 조건을 포함하는 일련의 활동
  (좁은 의미): SW개발할 때 필요한 절차,과정,구조
  (넓은 의미): SW개발할 때 필요한 절차,과정,구조, 도구,참여자

2. 2 소프트웨어 프로세스 모델의 이해
- 소프트웨어 프로세스 모델: 소프트웨어를 어떻게 개발할 것인지에 대한 전체적인 흐름을 체계화한 개념.
- 목적: 고품질 소프트웨어를 개발
- 역할: 일정 계획이 수립 가능해짐, 의사소통 원할

<소프트웨어 개발 방법론>
- 소프트웨어의 개발에 대한 각 작업단계를 체계적으로 정리한 작업 순서의 표준규범,
- 방법론 = 방법 + 지식과 경험
- 소프트웨어 개발 방법론 = 소프트웨어 공학 + 방법론
- 소프트웨어 방법론의 진화
1) 대용량 계산, 군사적으로 사용: 요구사항 단순, 방법론 필요 없음
2) 컴퓨터가 민간영역으로 보급됨: 요구사항 등장, 소프트웨어 방법론 출현
3) PC의 대중화: 사용자의 요구사항이 복잡/다양해짐.
4) 대형 프로젝트들이 증가: 객체지향언어 전성기,
5) 고객과 서비스 중심의 소프트웨어:　고객의 니즈를 예측하고 빠른 시간안에 개발해야함.

2. 3 주먹구구식 모델(build and fix model, code and fix model)
- 공식적인 프로세스 없이 그냥 마구잡이로 구현하는 방식
- 간단한 프로젝트를 수행할 때 사용
- 단점: 관리 및 유지보수가 어렵다.

2. 4 선형 순차적 모델(Linear Sequential Model, Waterfall Model)
- 6단계로 진행, 한 단계를 완벽히 수행한 후 그 다음 단계로 진행
- 장점: 관리의 용이, 체계적인 문서화.
- 단점: 이전 단계로 넘어갈 수 없어 수정 및 변경이 매우 힘듦.
        사용자의 새로운 요구사항 반영 힘듦.

2. 5 V Model
- 폭포수 모델 + 테스트 단계 추가 확장: 각 단계별로 테스트가 추가됨.
2. 6 진화적 프로세스 모델(protorype model)
- 정의: SDLC를 1번만 하는게 아닌 반복적으로 수행. 각 수행에서 prototype을 개발.
- prototype: 완성형이 아닌 간단한 시제품으로, 사용자와 의사소통하는 도구로 활용.
- 장점: 사용자의 요구가 충분히 반영될 수 있음.
       사용자와 의사소통이 용이.
- 단점: 반복적 개발을 통한 투입 인력 및 비용 계산이 어려움.
       불명확한 개발범위.

2. 7 나선형 모델(spiral Model)
- prototype model + 위험분석
- 위험 분석: 번번히 변경되는 요구사항, 팀원들의 능력 부족, 팀워크 부족 등
- 절차: 계획 및 요구 분석 -> 위험 분석 -> 개발 -> 사용자 평가
- 비용이 많이 들고, 시간이 오래 걸리는 대규모 프로젝트에 적합

- 장점: 사전 위험 분석을 통한 프로젝트 중도 확률 감소.
       사용자 요구가 제대로 반영된 제품.
- 단점: 반복적 개발에 의한 기간 연장의 가능성.

2. 8 4세대 모델(4th Generation Techniques)
- 정의: 사용자와 개발자가 손쉽게 접근 및 사용할 수 있는 CASE같은 자동화 도구, 4세대 언어를 사용하여, source code를 자동으로 생성해주는 모형.
- CASE: 일부 또는 전체를 자동화, 생산성 향상
- 장점: 원시 코드를 자동으로 생성해주므로 편리함과 시간 단축 가능성 부여
- 단점: 대규모 소프트웨어 개발에서는 자동화로 인해 분석 단계에서 더 많은 시간을 필요로 함. / 자동생성된 코드 중 불필요한 코드의 양이 많음.

2. 9 Agile Model
- 정의: 고객의 요구에 민첩하게 대응하고, 그때그때 주어지는 문제를 풀어나가는 방법론.
- 반복적인 개발을 통해 잦은 출시를 목표로 함

- 애자일 선언문
1) 프로세스와 도구 중심이 아닌, 개개인 간의 상호 소통 중시
2) 문서 중심이 아닌, 실행 가능한 소프트웨어 중시
3) 계약과 협상 중심이 아닌, 고객과의 협력 중시
4) 계획 중심이 아닌, 변화에 대한 민첩한 대응 중시

- 스크럼: 소프트웨어 개발 보다는 팀의 개선과 프로젝트 관리를 위한 방법.
- 진행 과정
1) 제품 기능 목록 작성
2) 스프린트 계획 회의: 스프린트 구현 목록 작성, 스프린트 개발 시간 추정
3) 스프린트 수행: 스프린트 개발, 일일 스크럼 회의, 소멸 차트 표시
4) 스프린트 개발 완료
5) 스프린트 완료 후: 스프린트 검토 회의, 스프린트 회고.

- 제품기능목록(product backlog): 우선순위가 매겨진 사용자의 요구 사항 목록
- user story: 메모지 한 장 정도에 사용자 관점에서 작성된 사용자 요구 사항
- story point: user story를 수행하는데 걸리는 개발 기간
- sprint: 작은 단위의 개발 업무를 단 기간 내에 전력질주하여 개발한다는 뜻
- sprint backlog: 각각의 스프린트 주기에서 개발할 작업 목록
- 소멸 차트(burndown chart): 날짜별로 남은 작업량을 표현
- refactoring: 겉 동작은 바꾸지 않고, 내부 소스코드를 쉽게 사용할 수 있도록 변경하는 것
- daily scrum meeting: 매일 서서 짧게 15분 진행, 남은 작업량, 어려운 점 리뷰
- 스프린트 검토회의(sprint review): 스프린트 목표를 달성했는지 결과물을 확인
- 스프린트 회고(sprint retrospective): 규칙이나 표준을 잘 준수했는지를 확인

- 제품 책임자(product owner): product backlog를 만들고, 스프린트 시작하면 관여X
- scrum master: owner를 보조하고 team을 이끔.
- scrum team: 실제 개발자

- scrum 장점: 충분한 의견 조율 가능, 팀원들간의 협력 증대
- scrum 단점: 각 끝에 실행가능한 제품을 만들어야 하므로 추가 작업 시간 필요.
               효율성, 프로세스 품질 평가 불가

- 익스트림 프로그래밍: 목표_고객에게 최고의 가치를 가장 빨리
  의사소통, 단순함, 피드백, 용기, 존중이라는 5가지의 가치에 기초
  개발속도를 높이는 기술
